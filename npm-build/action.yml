name: 'Build npm package'

inputs:
  GITHUB_TOKEN:
    description: access to current github repository
    required: true
  GITHUB_GLOBAL_TOKEN:
    description: access to github repositories for legacy packages
    required: false
  NPM_TOKEN:
    description: access token to @tfso NPM registry
    required: false
  FONT_AWESOME_TOKEN:
    description: access token to fortawesome NPM registry
    required: false
  DEFAULT_BUMP: 
    description: may be major, minor or patch, defaults to patch
    required: false
    default: 'patch'
  INITIAL_VERSION:
    description: initial version, nice if migrating from other build platforms
    required: false
  CUSTOM_TAG:
    description: Set a custom tag, useful when generating tag based on f.ex FROM image in a docker image. Setting this tag will invalidate any other settings set!
    required: false
  NODE_VERSION: 
    description: node version, defaults to 14
    required: false
    default: '14'
  PRUNE_PRODUCTION:
    description: prune for production
    required: false
    default: true
  TRUNCATE_PRERELEASE:
    description: truncate branchname to first word
    required: false
    default: false
  INCLUDE_SUBMODULES:
    description: include submodules at checkout
    required: false
    default: false

outputs:
  version: 
    description: the full version including 'v', will be prereleased if build is a branch
    value: ${{ steps.semver.outputs.new_tag || steps.custom.outputs.new_tag }}
  prerelease: 
    description: prerelease suffix for PR builds and will truncate branchname to first word ('feature/my-feature' will be 'feature') unless TRUNCATE_PRERELEASE is set to `false`
    value: ${{ steps.branch.outputs.prerelease }}
  deploy: 
    description: always 'true' if main branch, and always 'false' for other branchers except if a commit contains '#deploy_branch'
    value: ${{ steps.branch.outputs.deploy == 'false' && 'false' || 'true' }}

runs:
  using: 'composite'     
  steps: 
    - name: checkout
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        fetch-depth: '0' # important for versioning
        persist-credentials: false # important for legacy github packages
        submodules: ${{ inputs.INCLUDE_SUBMODULES }}

    - name: setup
      uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: 'npm'

    - shell: bash
      id: branch
      if: github.ref != format('refs/heads/{0}', github.event.repository.default_branch)
      name: gather branch information
      run: |
        echo "::set-output name=deploy::${{ contains(github.event.head_commit.message, '#deploy_branch') && 'true' || 'false' }}"

        if [ $TRUNCATE == "1" ]; then
          echo "::set-output name=prerelease::$(echo ${{ github.ref_name }} | sed 's/\([a-zA-Z0-9]\+\).*/\1/g')"
        else
          echo "::set-output name=prerelease::$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')"
        fi
      env:
        TRUNCATE: ${{ contains(inputs.TRUNCATE_PRERELEASE, 'false') && '0' || '1' }}

    - shell: bash
      name: git access
      if: inputs.GITHUB_GLOBAL_TOKEN
      run: |
        git config --global url."https://".insteadOf "git://"
        git config --global url."https://api:${ACCESS_TOKEN}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://ssh:${ACCESS_TOKEN}@github.com/".insteadOf "ssh://git@github.com/"
        git config --global url."https://git:${ACCESS_TOKEN}@github.com/".insteadOf "git@github.com:"
      env: 
        ACCESS_TOKEN: ${{ inputs.GITHUB_GLOBAL_TOKEN }}

    - shell: bash
      name: npm access token
      if: inputs.NPM_TOKEN
      run: |
        npm config set @tfso:registry=https://npm.pkg.github.com --userconfig .npmrc
        npm config set //npm.pkg.github.com/:_authToken=${NPM_TOKEN} --userconfig .npmrc
      env:
        NPM_TOKEN: ${{ inputs.NPM_TOKEN }}

    - shell: bash
      name: npm access token
      if: inputs.FONT_AWESOME_TOKEN
      run: |
        npm config set @fortawesome:registry=https://npm.fontawesome.com/ --userconfig .npmrc
        npm config set //npm.fontawesome.com/:_authToken=${NPM_TOKEN} --userconfig .npmrc
      env: 
        NPM_TOKEN: ${{ inputs.FONT_AWESOME_TOKEN }}

    - shell: bash
      name: install
      run: |
        npm ci

    - shell: bash
      name: build
      run: |
        npm run build

    - shell: bash
      name: tests
      run: |
        npm test

    - shell: bash
      name: clean up
      if: inputs.PRUNE_PRODUCTION == 'true'
      run: |
        npm prune --production

    - name: create version
      if: inputs.CUSTOM_TAG == ''
      id: semver
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        INITIAL_VERSION: ${{ inputs.INITIAL_VERSION }}
        DEFAULT_BUMP: ${{ inputs.DEFAULT_BUMP }}
        PRERELEASE_SUFFIX: ${{ steps.branch.outputs.prerelease }}
        WITH_V: true
        DRY_RUN: true

    - shell: bash
      name: fix custom version/tag
      if: inputs.CUSTOM_TAG
      id: custom
      run: |
        echo "::set-output name=new_tag::$(echo $CUSTOM_TAG | sed 's/v\?\(.*\)/\1/g')"
        echo $CUSTOM_TAG | sed 's/v\?\(.*\)/\1/g'
      env:
        CUSTOM_TAG: ${{ inputs.CUSTOM_TAG }}
        
    - shell: bash
      name: version package
      run: |
        npm version ${{ steps.semver.outputs.new_tag || steps.custom.outputs.new_tag }} --no-git-tag-version --ignore-scripts
